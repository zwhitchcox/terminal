// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  angular.module('app').controller('EditCtrl', [
    '$scope', '$http', '$routeParams', function($scope, $http, $routeParams) {
      $scope.active = {
        subject: ''
      };
      if (/cli/i.test($routeParams.tech)) {
        $scope.url = 'clis';
      } else if (/python/i.test($routeParams.tech)) {
        $scope.url = 'pythons';
      }
      $scope.getExercises = function() {
        if (localStorage[$scope.url] !== void 0) {
          return $scope.subjects = JSON.parse(localStorage[$scope.url]);
        } else {
          return $scope.resetExercises();
        }
      };
      $('#single_clippy').clippy({
        text: localStorage[$routeParams.tech]
      });
      $scope.setCur = function(x, m) {
        $scope.editX = x;
        $scope.editX.module = m.name;
        $scope.editX.subject = $scope.active.subject.name;
        return $scope.curX = JSON.parse(JSON.stringify($scope.editX));
      };
      $scope.val = function(it) {
        var e;
        try {
          return new RegExp('^' + it.check + '$').test(it.sample);
        } catch (_error) {
          e = _error;
        }
      };
      $scope.save = function(state) {
        return $scope.state = state;
      };
      $scope.update = function() {
        var curMod, curSubj, saveX;
        saveX = $.extend(true, {}, $scope.curX);
        delete saveX.subject;
        delete saveX.module;
        if (!(curSubj = _.findWhere($scope.subjects, {
          name: $scope.curX.subject
        }))) {
          $scope.subjects.push({
            name: $scope.curX.subject,
            modules: []
          });
        }
        if (!(curMod = _.findWhere($scope.subjects[curSubj], {
          name: $scope.curX.module
        }))) {
          $scope.subjects[curSubj].push({
            exercises: [],
            name: $scope.curX.module
          });
        }
        if ($scope.state === 'create') {
          curMod.exercises.push($scope.curX);
          alert('created');
        } else {
          if ($scope.editX.module !== $scope.curX.module) {
            $scope.remove($scope.editX);
            $scope.state = 'create';
            $scope.update();
            $scope.state = 'edit';
            return;
          }
          $scope.editX.sample = $scope.curX.sample;
          $scope.editX.challenge = $scope.curX.challenge;
          $scope.editX.check = $scope.curX.check;
          $scope.editX.output = $scope.curX.output;
        }
        return $scope.updateLocalStorage();
      };
      $scope.remove = function(exercise) {
        var curMod;
        curMod = _.findWhere($scope.subjects[exercise.subject], {
          name: exercise.module
        });
        curMod.exercises.splice(curMod.exercises.indexOf(exercise), 1);
        return $scope.updateLocalStorage();
      };
      $scope.updateLocalStorage = function() {
        $scope.subjects.forEach(function(curSubj) {
          return curSubj.modules.forEach(function(curMod, idx) {
            if (curMod.exercises.length === 0) {
              return $scope.subjects[curSubj].splice(idx, 1);
            }
          });
        });
        localStorage[$scope.url] = angular.toJson($scope.subjects);
        return $('#single_clippy').clippy({
          text: localStorage[$scope.url]
        });
      };
      $scope.resetExercises = function() {
        return $http.get("/" + $scope.url + ".json").success(function(data) {
          $scope.subjects = data;
          return $scope.updateLocalStorage();
        });
      };
      $scope.focus = 'exercises';
      $scope.toggleFocus = function() {
        if ($scope.focus === 'modules') {
          return $scope.focus = 'exercises';
        } else {
          return $scope.focus = 'modules';
        }
      };
      $scope.dragModuleFn = function(module, dragSub) {
        $scope.dragModule = module;
        return $scope.dragModuleSubject = dragSub;
      };
      $scope.dropModuleFn = function(module, dropSub) {
        var dragSub;
        dragSub = $scope.dragModuleSubject;
        dragSub.splice(dragSub.indexOf($scope.dragModule), 1);
        return dropSub.splice(dropSub.indexOf(module), 0, $scope.dragModule);
      };
      $scope.addSubject = function(subjectName) {
        return $scope.subjects.push({
          name: subjectName,
          modules: []
        });
      };
      return $scope.addModuleToSubject = function(dropSub) {
        var dragSub;
        dragSub = $scope.dragModuleSubject;
        dragSub.splice(dragSub.indexOf($scope.dragModule), 1);
        return dropSub.push($scope.dragModule);
      };
    }
  ]);

}).call(this);
